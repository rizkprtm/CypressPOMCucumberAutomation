{"version":3,"file":"html.js","sourceRoot":"","sources":["../../../src/formatter/builtin/html.ts"],"names":[],"mappings":";;;;;AAAA,yCAAqC;AACrC,6CAAsC;AACtC,qCAAmC;AACnC,0DAA4B;AAC5B,6DAA6D;AAC7D,8DAAoC;AACpC,gDAA4B;AAC5B,iDAK2B;AAO3B,kBAAe;IACb,IAAI,EAAE,WAAW;IACjB,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE;QACzC,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,mBAAmB,EAAE;YAC7C,MAAM,IAAI,KAAK,CACb,2EAA2E,CAC5E,CAAA;SACF;QACD,MAAM,KAAK,GAAG,sBAAW,CAAC,IAAI,EAAE,CAAA;QAChC,MAAM,UAAU,GAAG,IAAI,mCAAkB,CACvC,IAAA,qBAAU,EAAC,0BAA0B,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;YACxD,gBAAgB,EAClB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;YACxD,eAAe,CAClB,CAAA;QACD,MAAM,eAAe,GAAoB,EAAE,CAAA;QAC3C,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;YACxB,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,mBAAmB,EAAE;gBACrD,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,qBAAqB,CAC1D,KAAK,EACL,OAAO,CAAC,UAAU,EAClB,SAAS,CACV,CAAA;gBACD,UAAU,CAAC,KAAK,CAAC;oBACf,GAAG,OAAO;oBACV,UAAU;iBACQ,CAAC,CAAA;gBACrB,IAAI,cAAc,EAAE;oBAClB,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;iBACrC;aACF;iBAAM;gBACL,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;aAC1B;QACH,CAAC,CAAC,CAAA;QACF,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;QAE9C,OAAO,KAAK,IAAI,EAAE;YAChB,UAAU,CAAC,GAAG,EAAE,CAAA;YAChB,MAAM,IAAA,qBAAS,EAAC,sBAAQ,CAAC,CAAC,UAAU,CAAC,CAAA;YACrC,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;QACpC,CAAC,CAAA;IACH,CAAC;IACD,aAAa,EAAE,uBAAuB;IACtC,UAAU,EAAE,MAAM;CACgB,CAAA;AAEpC,MAAM,kBAAkB,GAAG,CAAC,2BAA2B,EAAE,eAAe,CAAC,CAAA;AAEzE,MAAM,YAAY,GAAG;IACnB,QAAQ,EAAE,OAAO;IACjB,MAAM,EAAE,QAAQ;CACR,CAAA;AAEV,SAAS,qBAAqB,CAC5B,KAAmB,EACnB,QAAoB,EACpB,SAAiB;IAEjB,IAAI,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACnD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAA;KAChC;IACD,IAAI,QAAQ,GAAG,cAAc,KAAK,EAAE,EAAE,CAAA;IACtC,MAAM,SAAS,GAAG,cAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;IAC5D,IAAI,SAAS,EAAE;QACb,QAAQ,IAAI,IAAI,SAAS,EAAE,CAAA;KAC5B;IACD,MAAM,cAAc,GAAG,IAAA,qBAAS,EAAC,mBAAS,CAAC,CACzC,mBAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,EAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CACnE,CAAA;IACD,MAAM,OAAO,GAAe;QAC1B,GAAG,QAAQ;QACX,eAAe,EAAE,oCAAyB,CAAC,QAAQ;QACnD,IAAI,EAAE,EAAE;QACR,GAAG,EAAE,KAAK,QAAQ,EAAE;KACrB,CAAA;IACD,OAAO;QACL,UAAU,EAAE,OAAO;QACnB,cAAc;KACf,CAAA;AACH,CAAC","sourcesContent":["import { promisify } from 'node:util'\nimport { finished } from 'node:stream'\nimport { writeFile } from 'node:fs'\nimport path from 'node:path'\nimport { CucumberHtmlStream } from '@cucumber/html-formatter'\nimport resolvePkg from 'resolve-pkg'\nimport mimeTypes from 'mime'\nimport {\n  Attachment,\n  AttachmentContentEncoding,\n  Envelope,\n  IdGenerator,\n} from '@cucumber/messages'\nimport { FormatterPlugin } from '../../plugin'\n\ninterface Options {\n  externalAttachments?: true\n}\n\nexport default {\n  type: 'formatter',\n  formatter({ on, options, write, directory }) {\n    if (!directory && options.externalAttachments) {\n      throw new Error(\n        'Unable to externalise attachments when formatter is not writing to a file'\n      )\n    }\n    const newId = IdGenerator.uuid()\n    const htmlStream = new CucumberHtmlStream(\n      resolvePkg('@cucumber/html-formatter', { cwd: __dirname }) +\n        '/dist/main.css',\n      resolvePkg('@cucumber/html-formatter', { cwd: __dirname }) +\n        '/dist/main.js'\n    )\n    const writeOperations: Promise<void>[] = []\n    on('message', (message) => {\n      if (message.attachment && options.externalAttachments) {\n        const { attachment, writeOperation } = externaliseAttachment(\n          newId,\n          message.attachment,\n          directory\n        )\n        htmlStream.write({\n          ...message,\n          attachment,\n        } satisfies Envelope)\n        if (writeOperation) {\n          writeOperations.push(writeOperation)\n        }\n      } else {\n        htmlStream.write(message)\n      }\n    })\n    htmlStream.on('data', (chunk) => write(chunk))\n\n    return async () => {\n      htmlStream.end()\n      await promisify(finished)(htmlStream)\n      await Promise.all(writeOperations)\n    }\n  },\n  documentation: 'Outputs a HTML report',\n  optionsKey: 'html',\n} satisfies FormatterPlugin<Options>\n\nconst alwaysInlinedTypes = ['text/x.cucumber.log+plain', 'text/uri-list']\n\nconst encodingsMap = {\n  IDENTITY: 'utf-8',\n  BASE64: 'base64',\n} as const\n\nfunction externaliseAttachment(\n  newId: () => string,\n  original: Attachment,\n  directory: string\n) {\n  if (alwaysInlinedTypes.includes(original.mediaType)) {\n    return { attachment: original }\n  }\n  let filename = `attachment-${newId()}`\n  const extension = mimeTypes.getExtension(original.mediaType)\n  if (extension) {\n    filename += `.${extension}`\n  }\n  const writeOperation = promisify(writeFile)(\n    path.join(directory, filename),\n    Buffer.from(original.body, encodingsMap[original.contentEncoding])\n  )\n  const updated: Attachment = {\n    ...original,\n    contentEncoding: AttachmentContentEncoding.IDENTITY,\n    body: '',\n    url: `./${filename}`,\n  }\n  return {\n    attachment: updated,\n    writeOperation,\n  }\n}\n"]}